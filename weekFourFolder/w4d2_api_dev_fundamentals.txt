This class deepens students’ understanding of advanced object-oriented programming by exploring inheritance, polymorphism, and abstraction in Python, connecting these concepts to UML design tools and software engineering best practices through hands-on coding and collaborative design exercises.

Key Definitions
API (Application Programming Interface)
Definition: A set of protocols, routines, and tools that specify how software components should interact.
Why It's Important: APIs enable different systems to communicate, making ML models accessible to web apps, mobile apps, and other services.
Real-World Analogy: Like a restaurant menu - it tells you what you can order (endpoints) and what you'll get back (responses).
ML Application: Exposing trained models so web apps can send data and receive predictions.
REST (Representational State Transfer)
Definition: An architectural style for designing networked applications using standard HTTP methods and URLs.
Why It's Important: Provides consistent, predictable patterns for API design that developers worldwide understand.
Real-World Analogy: Like a standardized filing system - everyone knows where to find what they need.
Key Principles:
Resources are identified by URLs (/users/123, /models/predictions)
HTTP methods indicate actions (GET = read, POST = create, etc.)
Stateless - each request contains all needed information
FastAPI
Definition: A modern, fast Python web framework for building APIs with automatic documentation and validation.
Why It's Important: Combines the design patterns we learned with modern web development practices.
Key Features:
Automatic API documentation (Swagger UI)
Built-in data validation using Pydantic
High performance
Type hints integration
HTTP Status Codes
Definition: Three-digit numbers that indicate the outcome of HTTP requests.
Why They're Important: Provide standardized way to communicate what happened with an API request.
Common Codes:
2xx Success: 200 (OK), 201 (Created), 204 (No Content)
4xx Client Errors: 400 (Bad Request), 404 (Not Found), 422 (Validation Error)
5xx Server Errors: 500 (Internal Server Error), 503 (Service Unavailable)


| Concept        | In Your Own Words                                        | Why It Matters                                       |
| -------------- | -------------------------------------------------------- | ---------------------------------------------------- |
| **API**        | A way for programs to talk to each other.                | Lets apps share data (your weather app uses one).    |
| **REST**       | A style of building APIs using URLs + HTTP methods.      | Keeps everything organized and consistent.           |
| **FastAPI**    | A Python framework that makes APIs quick to build.       | It’s what you’d use to *deploy* your app’s features. |
| **HTTP Codes** | Messages that tell what happened (success, error, etc.). | Helps with debugging and user messages.              |

┌───────────────────────────────┐
│  👩‍💻 Client (Browser/App)      │
│  → sends POST /predict        │
└───────────────┬───────────────┘
                ↓
        ┌────────────────-----------
        │ FastAPI Server           │
        │  - routes (endpoints)    │
        │  - validation (Pydantic) │
        │  - returns JSON response │
        └────────┬────────---------
                 ↓
         ┌──────────────┐
         │ ML Model/OOP │
         │   (logic)    │
         └──────────────┘
